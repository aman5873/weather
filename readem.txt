MERN = Mongo + Express + React + Node
Development = Node.js server + React server (basically fake)
Production = Node.js + static react files

Mongoose -> sits on top of mongoDB native driver (mongodb) -> rich developer experience
Database => collection(s)
collection -> Document(s)
Document -> JSON-like -> key value

mongodb community server*
your process (node) + MongoDB (ON CLOUD/SERVER) => Sockets (TCP) 


MEN(excluding React)

1. server = in directory 
     1. npm init -y || npm init (for automatically-initialize/ initialize project and package.json)
     2. npm add/install express ()
     3. Make directories & Files :
        (i) mkdir src => app.js (main-express file)
        (ii) mkdir public => index.html(default routing-> static page) , mkdir css & images (public folder)

     4. npm add nodemon (auto run server when changes detected)
        (i) add script in package.jason, "dev" : "nodemon src/app.js -e js,hbs" => npm run dev (the script will run)
     
     5. npm install mongoose => DB interface
          (i) cd src => mkdir models(connection.js),db(table/schema.js)

     6. nmp install hbs => Handlebars-Template
          (i) mkdir templates
          (ii) mkdir partials => create .hbs file (includes header template i.e containing repeted code)
          (ii) views => create .hbs file (includes header template i.e containing repeted code) Default Routing template-path for templates is views;
          // in app.js set static_path,template_path,partials_path; set-> view_engine,views; registerPartials;
     
     





//MERN
1. npx create-react-app client => cd client => npm start
2. server = in directory 
     1. npm init (for node project inirialization)
     2. npm install express ()
     3. npm install nodemon (auto run server when changes detected)
        (i) add script in package.jason, "dev" : "nodemon src/app.js -e js,hbs" => npm run dev (the script will run)
     4. npm install mongoose => DB interface
     5. add npm cors


///// GIT
1. git init => initialize current directory
2. git add -A / git add . => ad all changes in working directory to the staging area.
3. git status => status
4. git commit -m 'Initial Commit' => commit with message
5. git branch -M main => Change to main branch
6. git remote add origin https://github.com/aman5873/weather.git
7. git push -u origin main

///// Deploy NodeJs-express project on Heroku
1. heroku -v => Check heroku version
2. ls -al ~/.ssh => In git bash for checking ssh key/id
3. "start" : "node src/app.js" => In package.json 
4. heroku login
5. heroku keys:add => (first time only) add ssh key to heroku to connect git to heroku cloud
6. heroku create weather07-app => Create and initialize name of the app on heroku
7. git status => status if unstage then (add, commit & push ) repetedly when any change occur
4. git remote => show remote branch
5. git push -u origin main => push commit on remote git
6. git push -u heroku main => push commit of remote git-main to heroku-cloud




//// MongoDB Arlas
1. login
2. create db/cluster free
3. browse collection
4. create DB, collection(table)
5. create connection => username:aman; password:aman



/// In app.js => DataBase connection Using mongoDB-Atlas
// cluster : mongodb+srv://aman:<password>@cluster0.4s7yu.mongodb.net/myFirstDatabase?retryWrites=true&w=majority
   replace password and myFirstDatabase with password and DB_name
<!--  
const DB_URL = 'mongodb+srv://aman:aman@cluster0.4s7yu.mongodb.net/mernregister?retryWrites=true&w=majority'
const mongoose = require('mongoose');
mongoose.connect(DB_URL).then(() =>{
    console.log('connection sucessfull to DB');
}).catch((err) =>{
    console.log('connection Failed to DB');
})

// mongoose.connect(DB_URL, {
    userNewUrlParser: true,
    UserCreateIndex: true,
    UseUnifiedTopology: true,
    UseFindAndModify: false
}).then(() =>{
    console.log('connection sucessfull to DB');
}).catch((err) =>{
    console.log('connection Failed to DB');
})
-->